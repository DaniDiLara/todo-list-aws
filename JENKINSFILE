pipeline {
    agent none

    environment {
        AWS_REGION = 'us-east-1'
        STACK_NAME = 'todo-app-staging-dani'
        S3_BUCKET = 'aws-sam-cli-managed-default-samclisourcebucket-3jhja3mam3li'
        USUARIO_GITHUB = 'DaniDiLara'
        REPO = 'todo-list-aws'
        REPO_CONFIG = 'todo-list-aws-config'
    }

    stages {
        stage('Get Code') {
            agent { label 'dani' }
            steps {
                sh '''
                    echo "Ejecutando en nodo: $(hostname)"
                    echo "Usuario: $(whoami)"
                '''
                cleanWs()
                git branch: 'develop', url: 'https://github.com/DaniDiLara/todo-list-aws.git'
                sh '''
                    git clone --single-branch --branch staging https://github.com/${USUARIO_GITHUB}/${REPO_CONFIG}.git config-repo
                    cp config-repo/samconfig.toml .
                '''
            }
        }

        stage('Static Test') {
            agent { label 'agente1' }
            steps {
                unstash 'fuente'
                sh '''
                    echo "Ejecutando en nodo: $(hostname)"
                    echo "Usuario: $(whoami)"
                    flake8 src > flake8-report.txt || true
                    bandit -r src -f custom -o bandit-report.out --msg-template "{abspath}:{line}: [{test_id}] {msg}" || true
                '''
                recordIssues tools: [
                    flake8(pattern: 'flake8-report.txt'),
                    pyLint(name: 'Bandit', pattern: 'bandit-report.out')
                ]
                stash name: 'fuente', includes: '**/*'
            }
        }

        stage('Deploy') {
            agent { label 'dani' }
            steps {
                unstash 'fuente'
                sh '''
                    echo "Ejecutando en nodo: $(hostname)"
                    echo "Usuario: $(whoami)"
                    sam build
                    sam deploy --no-fail-on-empty-changeset
                '''
                script {
                    env.BASE_URL = sh(
                        script: """
                            aws cloudformation describe-stacks \
                              --stack-name ${STACK_NAME} \
                              --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" \
                              --region ${AWS_REGION} --output text
                        """,
                        returnStdout: true
                    ).trim()
                    echo "Base URL obtenida: ${env.BASE_URL}"
                }
                stash name: 'fuente', includes: '**/*'
            }
        }

        stage('Rest Test') {
            agent { label 'agente2' }
            steps {
                unstash 'fuente'
                sh '''
                    echo "Ejecutando en nodo: $(hostname)"
                    echo "Usuario: $(whoami)"
                    export BASE_URL
                    python3 -m pytest test/integration/todoApiTest.py || exit 1
                '''
                stash name: 'fuente', includes: '**/*'
            }
        }

        stage('Promote') {
            agent { label 'dani' }
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'github-token',
                    usernameVariable: 'GIT_USER',
                    passwordVariable: 'GIT_TOKEN')]) {
                    sh '''
                        echo "Ejecutando en nodo: $(hostname)"
                        echo "Usuario: $(whoami)"

                        REMOTE_URL="https://${GIT_USER}:${GIT_TOKEN}@github.com/$USUARIO_GITHUB/$REPO"

                        git fetch "$REMOTE_URL"
                        git checkout master || git checkout -b master origin/master
                        git merge origin/develop
                        git push "$REMOTE_URL" master
                    '''
                }
            }
        }
    }
}
